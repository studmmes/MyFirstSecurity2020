# Python與古典破密
```
依時間規範講解底下題目,特別是強調處理邏輯與程式語法
[1]使用Python求解變形caesar密碼 RC3 CTF 2016 : salad-100
[2]AlexCTF: Fore1: Hit the core
[3]School CTF 2015: affine-cipher-100(教)

可以當作進階研讀:
Vigenère cipher
```
## Crypto 101:RC3 CTF 2016 : salad-100
```
import string

caesaralpha = "abcdefghijklmnopqrstuvwxyz0123456789"

def caesar(input_string,rot) :
    output_string = ""
    for i in range(len(input_string)):
        if input_string[i].isalnum():
            idx = (caesaralpha.find(input_string[i]) + rot) % len(caesaralpha)
            output_string += caesaralpha[idx]
        else:
            output_string += input_string[i]
    return output_string

enc = '7sj-ighm-742q3w4t' # encrypt data

for i in range(len(caesaralpha)):
    print(caesar(enc, i))
```

```
'rc3-2016-romangod'.upper()
```
## 補充說明 caesar密碼:加密法與暴力破解法
```
import string

caesaralpha = "abcdefghijklmnopqrstuvwxyz"

def encode(input_string,rot) :
    output_string = ""
    for i in range(len(input_string)):
        if input_string[i].isalpha():
            idx = (caesaralpha.find(input_string[i]) + rot) % len(caesaralpha)
            output_string += caesaralpha[idx]
        else:
            output_string += input_string[i]
    return output_string

def decode(input_string,rot) :
    output_string = ""
    for i in range(len(input_string)):
        if input_string[i].isalpha():
            idx = (caesaralpha.find(input_string[i]) + rot) % len(caesaralpha)
            output_string += caesaralpha[idx]
        else:
            output_string += input_string[i]
    return output_string
  
#plaintext = 'breakallctf{happypythonday}' #  data
ciphertext = 'csfblbmmdug{ibqqzqzuipoebz}' # encrypt data
for i in range(len(caesaralpha)):
#    print(encode(plaintext, i))
     print(decode(ciphertext, i))
```
# AlexCTF: Fore1: Hit the core
```
https://github.com/ctfs/write-ups-2017/tree/master/alexctf-2017/forensics/fore1-hit-the-core-50

本題必須使用 linux strings 指令照出關鍵字
strings 指令==在目的檔或二進位檔案中查找可列印的字串
strings - print the strings of printable characters in files


底下是AlexCTF 2017改編的題目

你能解出古典密碼的答案嗎?

cvqAeqacLtqazEigwiXobxrCrtuiTzahfFreqc{bnjrKwgk83kgd43j85ePgb_e_rwqr7fvbmHjklo3tews_hmkogooyf0vbnk0ii87Drfgh_n kiwutfb0ghk9ro987k5tfb_hjiouo087ptfcv}
解答格式:ALEXCTF{XXXXXXXXXXXXXXXXXXXXXXXXXXX}
```
#### 第一種解法
```
cipher='cvqAeqacLtqazEigwiXobxrCrtuiTzahfFreqc{bnjrKwgk83kgd43j85ePgb_e_rwqr7fvbmHjklo3tews_hmkogooyf0vbnk0ii87Drfgh_n kiwutfb0ghk9ro987k5tfb_hjiouo087ptfcv}'

cipher=cipher[3:] 

flag = '' 

for x in range(0,len(cipher),1): 
    if x%5==0: 
       flag +=cipher[x]
        
print(flag)
```
#### 第二種解法
```

s = 'cvqAeqacLtqazEigwiXobxrCrtuiTzahfFreqc{bnjrKwgk83kgd43j85ePgb_e_rwqr7fvbmHjklo3tews_hmkogooyf0vbnk0ii87Drfgh_n kiwutfb0ghk9ro987k5tfb_hjiouo087ptfcv}' 
print(s[3::5])
```
#### 第三種解法
```
cipher='cvqAeqacLtqazEigwiXobxrCrtuiTzahfFreqc{bnjrKwgk83kgd43j85ePgb_e_rwqr7fvbmHjklo3tews_hmkogooyf0vbnk0ii87Drfgh_n kiwutfb0ghk9ro987k5tfb_hjiouo087ptfcv}' 

''.join(cipher[3 : : 5])
```

# Crypto 102::School CTF 2015: affine-cipher-100(教)
```
import string 

# 先產生小寫字母,再加入其他
s = string.ascii_lowercase # a-z 
s += '_'

# 使用 字典(dictionary)資料型態 來建立 轉換表|解密規則
d = {} 

for c in range(len(s)): 
      d[s[(c*4 + 15)%27]] = s[c] 

# 使用 轉換表|解密規則 逐字解出答案
ciphertext = 'ifpmluglesecdlqp_rclfrseljpkq' 
s1 = '' 

for x in ciphertext : 
     s1 += d[x] 

# 印出答案
print(s1)
```

# Vigenère cipher
```
from string import ascii_uppercase as uppercase
from itertools import cycle

#建立密碼表
table = dict()
for ch in uppercase:
    index = uppercase.index(ch)
    table[ch] = uppercase[index:]+uppercase[:index]

#建立解密密碼表
deTable = {'A':'A'}
start = 'Z'
for ch in uppercase[1:]:
    index = uppercase.index(ch)
    deTable[ch] = chr(ord(start)+1-index)

#解密金鑰
def deKey(key):
    return ''.join([deTable[i] for i in key])

#加密/解密
def encrypt(plainText, key):
    result = []
    #建立cycle物件，支援金鑰字母的循環使用
    currentKey = cycle(key)
    for ch in plainText:
        if 'A'<=ch<='Z':
            index = uppercase.index(ch)
            #取得金鑰字母
            ck = next(currentKey)
            result.append(table[ck][index])
        else:
            result.append(ch)
    return ''.join(result)

key = 'ABCDEF'
#key = 'DRAGON'
p = 'BREAKAllCTF{HAPPYPYTHONDAY}'
c = encrypt(p, key)

print("PlainText is: %s" %p)
print("CipherText is: %s" %c)
print("DecryptText is: %s" %encrypt(c,deKey(key)))
```
## Substitution cipher替換式密碼
```
wiki:https://en.wikipedia.org/wiki/Substitution_cipher

替換式密碼，又名取代加密法，是密碼學中按規律將文字加密的一種方式。

替換式密碼中可以用不同字母數為一單元，例如每一個或兩個字母為一單元，然後再作加密。
密文接收者解密時需用原加密方式解碼才可取得原文本。

由於拼音文字中字的組成為有限的字母，以英語為例只有26個字母，組成可能的單元數較少，
因此使用替換式密碼相對較為容易，而且亦可使用簡單機械進行加密

非拼音文字如中文則因單元數非常大難以使用一般加密方式，必需建立密碼本，然後逐字替換。
更何況某些非拼音文字中字字皆由不同大小的字根來組字，較難轉換，因此使用替換式密碼的示例比較少。

Simple substitution:凱薩密碼
Polyalphabetic substitution: Vigenère cipher
```
# 觀念補充:Substitution cipher vs transposition cipher

```
https://en.wikipedia.org/wiki/Substitution_cipher
替換式密碼，又名取代加密法，是密碼學中按規律將文字加密的一種方式
```
```
In cryptography, a substitution cipher is a method of encrypting by which units of plaintext are replaced with ciphertext, 
according to a fixed system; 
the "units" may be single letters (the most common), pairs of letters, triplets of letters, mixtures of the above, and so forth. 
The receiver deciphers the text by performing the inverse substitution.

Substitution ciphers can be compared with transposition ciphers. 
In a transposition cipher, the units of the plaintext are rearranged in a different and usually quite complex order, 
but the units themselves are left unchanged. 
By contrast, in a substitution cipher, the units of the plaintext are retained in the same sequence in the ciphertext, 
but the units themselves are altered.
```
###  換位密碼法 transposition cipher
```
https://en.wikipedia.org/wiki/Transposition_cipher
換位加密法是明文中出現的字母，在密文中也會出現，
只是順序被打散(明文沒出現的字母，密文也不會出現)
```

```
def encrypt(plainText, t):
    result = []
    length = len(t)
    #將明文分組
    temp = [plainText[i:i+length] for i in range(0,len(plainText),length)]
    #除最後一組之外的其他組進行換位處理
    for item in temp[:-1]:
        newItem = ''
        for i in t:
            newItem = newItem+item[i-1]
        result.append(newItem)
    return ''.join(result)+temp[-1]

p = 'BREAKAllCTF{HAPPYPYTHONDAY}'
print("PlainText is: %s" %p)

#加密
c = encrypt(p, (1, 4, 3, 2))
print("CipherText is: %s" %c)


#解密
print("DecryptText is: %s" %encrypt(c, (1, 4, 3, 2)))
```


